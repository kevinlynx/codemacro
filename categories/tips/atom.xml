<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tips | loop in codes]]></title>
  <link href="http://codemacro.com/categories/tips/atom.xml" rel="self"/>
  <link href="http://codemacro.com/"/>
  <updated>2017-03-09T21:37:18+08:00</updated>
  <id>http://codemacro.com/</id>
  <author>
    <name><![CDATA[Kevin Lynx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[erlang编程技巧若干]]></title>
    <link href="http://codemacro.com/2013/06/03/erlang-code-snippets/"/>
    <updated>2013-06-03T21:53:00+08:00</updated>
    <id>http://codemacro.com/2013/06/03/erlang-code-snippets</id>
    <content type="html"><![CDATA[<h2>guard</h2>

<p>guard可以以逗号或者分号分隔，以逗号分隔表示最终的结果为各个guard的and结果，以分号则是只要任意一个guard为true则最终结果为true。</p>

<p>{% highlight erlang %}
guard(X, Y) when not(X>Y), is_atom(X) ->
    X + Y.
{% endhighlight %}</p>

<p>guard在list comprehension中可以筛选元素：</p>

<p>{% highlight erlang %}
NewNodes  = [Node || Node &lt;- AllNodes, not gb_sets:is_member(Node, NewQueried)],
{% endhighlight %}</p>

<p>guard中不能使用自定义函数，因为guard应该保证没有副作用，但自定义函数无法保证这一点，所以erlang禁止在guard中使用自定义函数。</p>

<!-- more -->


<h2>list comprehension</h2>

<p>list comprehension是一个非常有用的语法特性，它可以用于构造一个新的list，可以用于将一种list映射到另一种list，可以筛选list元素。只要是跟list相关的操作，优先考虑用list comprehension来实现，将大大减少代码量。记住list comprehension的语法：</p>

<pre><code>[Expression || Generators, Guards, Generators, ...]
</code></pre>

<h2>timer</h2>

<p>一定时间后向进程发送消息：</p>

<p>{% highlight erlang %}
erlang:send_after(token_lifetime(), self(), renew_token),
{% endhighlight %}</p>

<p>一段时间后执行某个函数：</p>

<p>{% highlight erlang %}
{% raw %}
{ok, TRef} = timer:apply_interval(Interval, ?MODULE, announce, [self()]),
{% endraw %}
{% endhighlight %}</p>

<h2>gb_trees/gb_set</h2>

<h2>pattern match</h2>

<p>pattern match有太多作用了：</p>

<h3>pattern match in case</h3>

<p>case中判定多个值，比其使用逻辑运算符简洁多了：</p>

<p>{% highlight erlang %}
{% raw %}
A = 1, B = 2,
case {A, B} of
    {<em>C, </em>C} -> true;
    {<em>, </em>} -> false
end
{% endraw %}
{% endhighlight %}</p>

<h3>pattern match to check data type</h3>

<p>pattern match可以用于检测变量的类型，可以用于检测函数的返回值，就像C/C++中的assert一样，可以用于尽早检测出异常状态：</p>

<p>{% highlight erlang %}
ping({<em>, </em>, <em>, </em>} = IP, Port) ->
    ok.
{ok, Ret} = call().
{% endhighlight %}</p>

<h2>list操作</h2>

<h3>添加元素</h3>

<p>添加元素进list有很多方式：</p>

<p>{% highlight erlang %}
[2]++[3, 4].
[2|[3,4]].
{% endhighlight %}</p>

<h3>foldl/foldr</h3>

<p>用于遍历list计算出一个“累加值“。</p>

<p>{% highlight erlang %}
lists:foldl(fun(X, Sum) -> X + Sum end, 0, [1,2,3,4,5]).
{% endhighlight %}</p>

<p>也就是遍历一个list，将每个元素传递给fun，将fun的返回值继续传递给下一个元素。</p>

<h3>zip</h3>

<p>将两个list一一对应构造出一个tuple，作为新的list里的元素。</p>

<p>{% highlight erlang %}
lists:zip([1, 2, 3], [4, 5, 6]).
    => [{1,4},{2,5},{3,6}]
{% endhighlight %}</p>

<h3>数字进制</h3>

<p>16##FF，表示16进制数字0xFF，通用格式为scale##num，即scale进制下的num。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress中的SEO]]></title>
    <link href="http://codemacro.com/2012/09/06/octopress-seo/"/>
    <updated>2012-09-06T19:02:00+08:00</updated>
    <id>http://codemacro.com/2012/09/06/octopress-seo</id>
    <content type="html"><![CDATA[<p>来自<a href="http://www.yatishmehta.in/seo-for-octopress">SEO for Octopress</a></p>

<p>Octopress默认为每个页面添加<code>meta description</code>，其内容为当前文章的前150个字符，如果是首页就会是第一篇文章的前150个字符。这里主要通过增加<code>meta keywords</code>来提高SEO。</p>

<!-- more -->


<h2>为每篇文章增加keywors和description</h2>

<p>就像我的这篇博客，这下文章头得填很多数据了，有点麻烦：</p>

<p>{% highlight yaml %}</p>

<h2>{% raw %}</h2>

<p>layout: post
title: &ldquo;Octopress中的SEO&rdquo;
date: 2012-09-06 19:02
comments: true
categories: tips
tags: [tips, octopress]
keywords: seo, octopress</p>

<h2>description: Octopress默认为每个页面添加<code>meta description</code>，其内容为当前文章的前150个字符，如果是首页就会是第一篇文章的前150个字符。这里主要通过增加<code>meta keywords</code>来提高SEO。</h2>

<p>{% endraw %}
{% endhighlight %}</p>

<p>这样，每篇文章页面头就会自动增加<code>meta keywords</code>项，<code>description</code>也会使用这里填的，而不是自动为文章前若干个字符。这个功能的实现在<code>_includes/head.html</code>中。</p>

<p>{% highlight html %}
{% raw %}
<meta name="author" content="Kevin Lynx">
<meta name="description" content=" Octopress默认为每个页面添加`meta description`，其内容为当前文章的前150个字符，如果是首页就会是第一篇文章的前150个字符。这里主要通过增加`meta keywords`来提高SEO。 ">
<meta name="keywords" content="seo, octopress">
{% endraw %}
{% endhighlight %}</p>

<h2>为页面(Page)增加keywords</h2>

<p>上面只是修正了每篇博客页面的<code>meta</code>信息，octopress中还有几个页面需要修正，例如首页，这个可以通过修改<code>_includes/head.html</code>来完成。替换相关内容为以下：</p>

<p>{% highlight html %}
{% raw %}
<meta name="author" content="{{ site.author }}">
{% capture description %}{% if page.description %}{{ page.description }}{% elsif site.description %}{{ site.description }}{%else%}{{ content | raw_content }}{% endif %}{% endcapture %}
<meta name="description" content="{{ description | strip_html | condense_spaces | truncate:150 }}">
{% if page.keywords %}<meta name="keywords" content="{{ page.keywords }}">{%else%}<meta name="keywords" content="{{ site.keywords }}">{% endif %}
{% endraw %}
{% endhighlight %}</p>

<p>如果页面没有提供<code>keywords</code>或者<code>description</code>的话，就使用<code>site</code>里的设置，也就需要修改<code>_config.yml</code>：</p>

<p>{% highlight yaml %}
{% raw %}
description: loop in codes, Kevin Lynx blog
keywords: c/c++, mmo, game develop, lisp, ruby, lua, web development
{% endraw %}
{% endhighlight %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c/c++中几种操作位的方法]]></title>
    <link href="http://codemacro.com/2012/09/04/bit-operation-in-c-slash-c-plus-plus/"/>
    <updated>2012-09-04T19:49:00+08:00</updated>
    <id>http://codemacro.com/2012/09/04/bit-operation-in-c-slash-c-plus-plus</id>
    <content type="html"><![CDATA[<p>参考<a href="http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c">How do you set, clear and toggle a single bit in C?</a></p>

<p>c/c++中对二进制位的操作包括设置某位为1、清除某位（置为0）、开关某位(toggling a bit)、检查某位是否为1等。这些操作较为常见并且可以作为其他位运算的基础接口，以下罗列几种方法：</p>

<h2>传统方法</h2>

<ul>
<li>设置某位为1</li>
</ul>


<p>{% highlight c++ %}
number |= 1 &lt;&lt; x; // 设置第x位为1
{% endhighlight %}</p>

<!-- more -->


<ul>
<li>清除某位</li>
</ul>


<p>{% highlight c++ %}
number &amp;= ~(1 &lt;&lt; x); // 置第x位为0
{% endhighlight %}</p>

<ul>
<li>开关某位</li>
</ul>


<p>{% highlight c++ %}
number ^= 1 &lt;&lt; x;
{% endhighlight %}</p>

<ul>
<li>检查某位</li>
</ul>


<p>{% highlight c++ %}
if (number &amp; (1 &lt;&lt; x))
{% endhighlight %}</p>

<p>相应地我们可以将其封装起来，简便的方法是使用宏来封装：</p>

<p>{% highlight c++ %}</p>

<h1>define BIT_SET(a,b) ((a) |= (1&lt;&lt;(b)))</h1>

<h1>define BIT_CLEAR(a,b) ((a) &amp;= ~(1&lt;&lt;(b)))</h1>

<h1>define BIT_FLIP(a,b) ((a) ^= (1&lt;&lt;(b)))</h1>

<h1>define BIT_CHECK(a,b) ((a) &amp; (1&lt;&lt;(b)))</h1>

<p>{% endhighlight %}</p>

<h2>使用位结构操作</h2>

<p>这个使用起来简单很多：</p>

<p>{% highlight c++ %}
struct bits {
    unsigned int a:1;
    unsigned int b:1;
    unsigned int c:1;
};</p>

<p>struct bits mybits;</p>

<p>// set/clear a bit
mybits.b = 1;
mybits.c = 0;</p>

<p>// toggle a bit
mybits.a = !mybits.a;
mybits.b = ~mybits.b;
mybits.c ^= 1;</p>

<p>// check a bit
if (mybits.c)
{% endhighlight %}</p>

<h2>使用STL的std::bitset<N></h2>

<p>这个方法其实类似于使用位结构，只不过STL包装了这个结构定义，当然还提供了很多便捷的接口：</p>

<p>{% highlight c++ %}
std::bitset<5> bits;
bits[0] = true;
bits[1] = false;
bits.set(2);
bits.flip(3);
bits.reset(2);
{% endhighlight %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[c/c++中的-->运算符]]></title>
    <link href="http://codemacro.com/2012/09/03/goes-to-operator/"/>
    <updated>2012-09-03T15:14:00+08:00</updated>
    <id>http://codemacro.com/2012/09/03/goes-to-operator</id>
    <content type="html"><![CDATA[<p>参考<a href="http://stackoverflow.com/questions/1642028/what-is-the-name-of-this-operator">What is the name of this operator: &ldquo;&ndash;>&rdquo;?</a></p>

<p>c/c++中以下代码是合法的：</p>

<p>{% highlight c++ %}</p>

<h1>include &lt;stdio.h></h1>

<p>int main()
{
     int x = 10;
     while( x &ndash;> 0 ) // x goes to 0
     {
        printf(&ldquo;%d &rdquo;, x);
     }
}
{% endhighlight %}</p>

<!-- more -->


<p><code>--&gt;</code>是一个合法的操作符，我打赌自认c/c++熟手的你们都不知道这个操作符。有人称它为<code>goes to</code>操作符，<code>x--&gt;0</code>表示x向0趋近。</p>

<p><strong>其实我在忽悠你们。</strong> 并且我相信有很多人对此把戏相当熟悉。没错，<code>--&gt;</code>只是两个操作符恰好遇在了一起，他们是自减运算符<code>--</code>和大于比较运算符<code>&gt;</code>：</p>

<p>{% highlight c++ %}
while (x&ndash; > 0)
    &hellip;
{% endhighlight %}</p>

<p>类似的把戏还有：</p>

<p>{% highlight c++ %}
while (x &ndash; \
             \
              \
               \
                > 0)
    printf(&ldquo;%d &rdquo;, x);
{% endhighlight %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Null Object模式]]></title>
    <link href="http://codemacro.com/2012/08/29/null-object-pattern/"/>
    <updated>2012-08-29T15:57:00+08:00</updated>
    <id>http://codemacro.com/2012/08/29/null-object-pattern</id>
    <content type="html"><![CDATA[<p>Null Object模式用于代替空指针（C++中），以避免上层模块对返回值做空值判定。Null Object模式返回的不是一个空指针，而是一个空对象，上层模块对返回值做操作时，不需要做空判定，而是按正常逻辑调用这个对象的某个接口，只不过对于空对象而言，这个接口什么事也没做，例如：</p>

<p>{% highlight c++ %}
class animal {
public:
  virtual void make_sound() = 0;
};</p>

<p>class dog : public animal {
  void make_sound() { cout &lt;&lt; &ldquo;woof!&rdquo; &lt;&lt; endl; }
};</p>

<p>class null_animal : public animal {
  void make_sound() { }
};</p>

<p>{% endhighlight %}</p>

<p>在我看来这个模式在C++中其实挺扯淡的，因为去判断一个指针是否为NULL，远比创建一个空类，并且添加若干个空函数代价小更多。更何况，我们还不知道<code>null_animal</code>的生命周期如何管理。</p>

<p>但是在我以往写的代码中，我也写过一些避免空指针判定的代码，例如我会使用引用。注意，引用肯定不能保证所对应的对象是合法的，这就像无法确定一个指针是不是野指针一样：</p>

<p>{% highlight c++ %}
const Item &amp;Container::FindItem(int id) const {
    static Item null_item;
    Table::const_iterator it = m_items.find(id);
    return it == m_items.end() ? null_item : it->second;
}
{% endhighlight %}</p>

<p>参考<a href="http://en.wikipedia.org/wiki/Null_Object_pattern">http://en.wikipedia.org/wiki/Null_Object_pattern</a></p>
]]></content>
  </entry>
  
</feed>
