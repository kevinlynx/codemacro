<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: java | loop in codes]]></title>
  <link href="http://codemacro.com/categories/java/atom.xml" rel="self"/>
  <link href="http://codemacro.com/"/>
  <updated>2018-05-30T04:22:05+00:00</updated>
  <id>http://codemacro.com/</id>
  <author>
    <name><![CDATA[Kevin Lynx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[实现一个memcache proxy]]></title>
    <link href="http://codemacro.com/2017/05/18/memcache-proxy/"/>
    <updated>2017-05-18T00:00:00+00:00</updated>
    <id>http://codemacro.com/2017/05/18/memcache-proxy</id>
    <content type="html"><![CDATA[<p>通常我们会使用多台memcached构成一个集群，通过客户端库来实现缓存数据的分片(replica)。这会带来2个主要问题：</p>

<ul>
<li>memcached机器连接数过多</li>
<li>不利于做整体的服务化；缺少可运维性。例如想对接入的客户端做应用级隔离；或者对缓存数据做多区域(机房)的冗余</li>
</ul>


<p>实现一个memcache proxy，相对于减少连接数来说，主要可以提供更多的扩展性。目前已经存在一些不错的memcache proxy，例如twitter的<a href="https://github.com/twitter/twemproxy">twemproxy</a>，facebook的<a href="https://github.com/facebook/mcrouter">mcrouter</a>。稍微调研了下，发现twemproxy虽然轻量，但功能较弱；mcrouter功能齐全，类似多区域多写的需求也满足。处于好玩的目的，之前又读过网络库<a href="http://codemacro.com/2017/04/09/xnio-source/">xnio</a>源码，我还是决定自己实现一个。</p>

<!-- more -->


<p>这个项目简单取名为<a href="https://github.com/kevinlynx/kvproxy">kvproxy</a>，通过简单的抽象可以实现为memcache或redis等key-value形式的服务proxy。 这是一些预想中的<a href="https://github.com/kevinlynx/kvproxy/blob/master/design.md">feature</a>。</p>

<p>在目前的阶段，主要关注于其性能。因为memcached本身的RT非常小，所以这个proxy的性能就要求比较高。这里主要先关注下核心功能的实现。</p>

<h2>架构</h2>

<p>如下图：</p>

<p><img src="http://i.imgur.com/VxrSdKT.png" alt="" /></p>

<ul>
<li><code>Service</code>，用于抽象key-value服务，如memcache；<code>MemcacheService</code>是其实现之一</li>
<li><code>ServerLocator</code>，用于定位memcached机器列表，例如<code>ConstantLocator</code>则是从配置文件中读取。可以实现一个从名字服务读取列表的locator。</li>
<li><code>Connection</code>，配合<code>KVProxy</code>，基于xnio，表示一个与客户端的连接</li>
<li><code>ConnectionListener</code>，用于处理网络连接上的请求，例如<code>RequestHandler</code>则是<code>MemcaheService</code>中的listener，用于处理从客户端发过来的memcache协议请求</li>
<li><code>MemClient</code>，包装memcache客户端，用于proxy将请求转发到后端的memcache服务</li>
<li><code>GroupClient</code>，包装<code>MemClient</code>，可以用于多区域数据的同时写入，目前实现为单个primary及多个slave。写数据同步写入primary异步写入slave；读取数据则只从primary读。</li>
</ul>


<p>本身要抽象的东西不复杂，所以结构其实是很简单的，也没有花太多心思。接下来关注下性能方面的问题。</p>

<h2>异步性</h2>

<p>作为一个proxy，异步基本是必然选择的方案，指的是，proxy在收到memcache的请求时，不阻塞当前的IO线程，形成一个请求context，在收到回应时拿到这个context来回应客户端。这样通过增加消耗的内存，来释放CPU资源，可以让IO模块尽可能多地接收从客户端来的请求。当然，如果请求过多，可能就会耗尽内存。</p>

<p>为了简单，我没有自己实现memcache client。网络上有很多开源的memcache client。我试了几个，例如<a href="http://codemacro.com/2017/04/23/xmemcached/">xmemcached</a>(为此还读过它的源码)，但由于这些客户端都是同步的，虽然可以自己起线程池来把同步包装为异步，但始终不是最优方案。最后无意发现了<a href="https://github.com/spotify/folsom">folsom</a>，集成到kvproxy后性能表现还不错。当然，真正要做到性能最优，最好还是自己实现memcache client，这样可以使用同一个xnio reactor，不用开那么多IO线程，拿到数据后就可以直接得到ByteBuffer，应该可以减少内存拷贝操作(能提高多少也不确定)。</p>

<h2>性能测试</h2>

<p>我使用了<a href="https://github.com/RedisLabs/memtier_benchmark">memtier_benchmark</a>来做压力测试。测试环境是16core的虚拟机(宿主机不同)，benchmark工具同目标测试服务部署在不同的机器，proxy同memcache部署在相同机器。目标服务基于OS centos7，测试命令为：</p>

<pre><code>./memtier_benchmark -s 127.0.0.1 -p 22122 -P memcache_text --test-time 60 -d 4096 --hide-histogram
</code></pre>

<p>默认开启4个压测线程，每个线程建立50个连接，测试60秒，默认设置是1:10的set/get。</p>

<p>首先是直接压测memcached：</p>

<pre><code>ALL STATS
========================================================================
Type        Ops/sec     Hits/sec   Misses/sec      Latency       KB/sec
------------------------------------------------------------------------
Sets        5729.65          ---          ---      3.27500     23141.85
Gets       57279.42        80.33     57199.09      3.16000      1771.99
Waits          0.00          ---          ---      0.00000          ---
Totals     63009.07        80.33     57199.09      3.17000     24913.84
</code></pre>

<p>然后我压测了twitter的twemproxy，RT差不多增加70%。</p>

<pre><code>ALL STATS
========================================================================
Type        Ops/sec     Hits/sec   Misses/sec      Latency       KB/sec
------------------------------------------------------------------------
Sets        3344.58          ---          ---      5.58400     13508.68
Gets       33430.28        40.00     33390.28      5.41900      1006.32
Waits          0.00          ---          ---      0.00000          ---
Totals     36774.85        40.00     33390.28      5.43400     14515.00
</code></pre>

<p>最后是压测kvproxy (jdk8)，只与memcache建立一个连接，RT增加95%，基本上翻倍。不过由于是Java实现，相对于twemproxy的C实现感觉也不差。当然，机器资源消耗更大(主要是内存)。</p>

<pre><code>ALL STATS
========================================================================
Type        Ops/sec     Hits/sec   Misses/sec      Latency       KB/sec
------------------------------------------------------------------------
Sets        2959.41          ---          ---      6.62400     11953.00
Gets       29578.47        33.90     29544.57      6.20800       884.38
Waits          0.00          ---          ---      0.00000          ---
Totals     32537.88        33.90     29544.57      6.24600     12837.37
</code></pre>

<p>压测中IO线程CPU并没有跑满，推测是虚拟机之间的网络带宽还是不够。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xmemcached源码阅读]]></title>
    <link href="http://codemacro.com/2017/04/23/xmemcached/"/>
    <updated>2017-04-23T00:00:00+00:00</updated>
    <id>http://codemacro.com/2017/04/23/xmemcached</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/killme2008/xmemcached">Xmemcached</a> 是一个memcached客户端库。由于它提供的是同步API，而我想看下如何增加异步接口。所以就大致浏览了下它的源码。</p>

<h2>主要结构</h2>

<p>针对memcache客户端的实现，主要结构如下：</p>

<p><img src="http://i.imgur.com/7r4Y35O.jpg" alt="" /></p>

<ul>
<li><code>XMemcachedClient</code> 是应用主要使用的类，所有针对memcache的接口都在这里</li>
<li><code>Command</code> 用于抽象二进制协议或文本协议下各个操作，这里称为Command。<code>CommandFactory</code> 用于创建这些command</li>
<li><code>MemcachedSessionLocator</code> 用于抽象不同的负载均衡策略，或者说数据分布策略。在一个memcached集群中，数据具体存放在哪个replica中，主要就是由这个类的实现具体的，例如<code>KetamaMemcachedSessionLocator</code> 实现了一致性哈希策略</li>
<li><code>MemcachedConnector</code> 包装了网络部分，与每一个memcached建立连接后，就得到一个<code>Session</code>。command的发送都在<code>MemcachedConnector</code>中实现</li>
<li>各个Session类/接口，则涉及到Xmemcached使用的网络库yanf4j。这个库也是Xmemcached作者的。</li>
</ul>


<!-- more -->


<p>Command 类的实现中有个关键的<code>CountDownLatch</code>。在将Command通过session发送出去之后，就利用这个latch同步等待，等到网络模块收到数据后回调。Command会和session绑定，在这个session上收到数据后，就认为是这个command的回应。</p>

<p>由于本身memcached库核心东西比较少，上面的结构也就很好理解。协议的抽象和数据分布策略的抽象是必须的。接下来看看网络实现部分。</p>

<h2>网络实现</h2>

<p>Xmemcached的网络实现主要结构如下：</p>

<p><img src="http://i.imgur.com/pwGjcgQ.jpg" alt="" /></p>

<ul>
<li><code>SocketChannelController</code>，主要的类，将IO事件通知转交给session</li>
<li><code>NioController</code>，主要关注其成员<code>SelectorManagrer</code></li>
<li><code>SelectorManager</code> 内置若干个<code>Reactor</code>，数量由CPU核数决定</li>
<li><code>Reactor</code>，IO事件的产生器，一个Reactor对应一个线程，线程循环中不断轮询NIO selector是否产生了IO事件</li>
<li><code>CodecFactory</code>，编解码网络消息接口</li>
<li><code>PoolDispatcher</code> ，Dispatcher 用于调度一个IO事件的具体处理过程，而<code>PoolDispatcher</code>则是放到一个单独的线程池中处理</li>
<li><code>DispatcherFactory</code> ，用于创建具体的dispatcher</li>
</ul>


<p>这个网络实现还是比较典型的Reactor模式。其中，产生IO事件后，IO事件的具体处理，默认交给了一个独立的线程池。一般网络库都会提供类似的机制，以使得IO线程不至于被业务逻辑阻塞住，导致IO处理效率下降。</p>

<p>写数据时，数据都会写到一个队列中，在设备可写时才具体写入。看下具体的读数据过程：</p>

<p><img src="http://i.imgur.com/N7XqVS7.jpg" alt="" /></p>

<p>从Reactor中最终调用到Xmemcached的command，用于具体解析回应数据。要调整为异步的话，则可以修改Command的实现，增加异步回调。同时注意控制dispatcher使用的线程池。</p>

<p>完。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[XNIO源码阅读]]></title>
    <link href="http://codemacro.com/2017/04/09/xnio-source/"/>
    <updated>2017-04-09T00:00:00+00:00</updated>
    <id>http://codemacro.com/2017/04/09/xnio-source</id>
    <content type="html"><![CDATA[<p><a href="http://xnio.jboss.org/">XNIO</a>是JBoss的一个IO框架。最开始我想找个lightweight servlet container库，于是看到了<a href="http://undertow.io/">undertow</a>，发现其网络部分使用的就是XNIO。所以干脆就先把XNIO的源码读下。</p>

<p>XNIO文档非常匮乏，能找到都是<a href="https://docs.jboss.org/author/display/XNIO/About+XNIO">3.0的版本</a>，而且描述也不完全。Git上已经出到3.5.0。我读的是3.3.6.Final。</p>

<h2>使用方式</h2>

<p>可以参考<a href="https://github.com/ecki/xnio-samples/blob/master/src/main/java/org/xnio/samples/SimpleEchoServer.java">SimpleEchoServer.java</a>，不过这个例子使用的API已经被deprecated，仅供参考。使用方式大致为：</p>

<ul>
<li>创建服务，提供acceptListener</li>
<li>在acceptListener中accept新的连接，并注册连接listener</li>
<li>在连接listener回调中完成IO读写</li>
</ul>


<!-- more -->


<h2>主要概念</h2>

<ul>
<li>Channel，基本上同Java NIO中的Channel一致，一个server socket是一个channel，accept出来的连接也是channel</li>
<li>ChannelListener，监听Channel上的IO事件，应用代码与XNIO交互的地方</li>
<li>XnioWorker，维护IO线程池及应用任务线程池</li>
</ul>


<h2>项目结构</h2>

<p>源码分为两个项目: xnio-api及nio-impl。xnio-api属于API层；nio-impl是基于NIO的实现。通过Java service provider动态地找到nio-impl这个实现。可见XNIO还可以用其他方式来实现。</p>

<p><code>org.xnio.channels</code>这个包里包含了大量的Channel接口定义，这个是非常恶心的一个地方，读代码的时候很容易被绕进去。这个包主要的实现后面提。<code>org.xnio.conduits</code>，我理解为比Channel更底层的传输通道，channel依赖于conduit实现，总之也是个恶心的概念。</p>

<h2>线程模型</h2>

<p>可以通过连接如何建立以及建立连接后如何管理连接来了解XNIO的线程模型。通过这个过程我简单画了下主要类关系以及连接建立过程：</p>

<p><img src="http://i.imgur.com/HoL99Wz.png" alt="" /></p>

<p><em>用的Dia绘图，UML图支持得不够好</em></p>

<p>XNIO的线程模型是一个典型的one loop per thread的Reactor模型。<code>WorkerThread</code>类就是这个线程，其有一个主循环，不断地检测其关心的IO设备是否有IO事件发生。当有事件发生时，就将事件通知给关心的listener。站在上层模块的角度，这个线程就是一个Reactor，事件产生器。整个系统有固定数量的<code>WorkerThread</code>，也就是IO线程数。这个模型基本上凡是基于epoll/select模型实现的网络库都会用，例如<a href="http://codemacro.com/2014/05/04/muduo-source/">muduo</a>。可以回看下这个模型：</p>

<p><img src="http://codemacro.com/assets/res/muduo-model.png" alt="" /></p>

<p>XNIO中接收到一个新连接时，会根据这个连接的地址(remote&amp;local address)算出一个哈希值，然后根据哈希值分配到某一个IO线程，然后该连接以后的IO事件都由该线程处理。<code>WorkerThread</code>会始终回调<code>NioHandle</code>。<code>QueuedNioTcpServerHandle</code>是一个accept socket，监听accept事件。而<code>NioSocketStreamConnection</code>则是一个建立好的连接，每次新连接进来就会创建，被哈希到某个<code>WorkerThread</code>处理。<code>NioSocketConduit</code>是一个连接具体关心IO事件的类，正是前面提到的，是一个Channel的底层实现。</p>

<p><code>NioXnioWorker</code>继承于<code>XnioWorker</code>，<code>XnioWorker</code>内部包含了一个应用任务的线程池。应用代码通过channel listener获取到IO事件通知，channel listener是在IO线程中回调的，所以不适合做耗时操作，否则会导致IO线程中其他IO设备饿死。所以对于这类任务就可以放到这个线程池中做。</p>

<h2>Channel架构</h2>

<p>前面提到的XNIO例子使用了一个deprecated的接口，那如何不使用这个接口呢？这就需要更具体地了解channel。XNIO中抽象的channel有很多类型，有些是只读的，有些是只写的，有些则是全双工的。channel还能被组合 (<code>AssembledChannel</code>)。可以看下3.1里channel包的大图：<a href="http://docs.jboss.org/xnio/3.1/api/org/xnio/channels/package-summary.png">channel package summary</a></p>

<p>这里我只关注基于TCP服务中的channel。如图：</p>

<p><img src="http://i.imgur.com/BjmU3BJ.png" alt="" /></p>

<p>重点关注 <code>QueuedNioTcpServer</code> 及 <code>NioSocketStreamConnection</code>。<code>QueuedNioTcpServer</code>实现<code>AcceptingChannel</code> 没什么好说的，就是表示一个可以接收连接的channel。<code>NioSocketStreamConnection</code>表示一个网络连接。<code>StreamConnection</code>是一个可读可写的channel，但是其内部是通过另外两个channel来实现的，分别是<code>ConduitStreamSourceChannel</code>及<code>ConduitStreamSinkChannel</code>，分别用读和写。这两个channel内部其实是分别通过两个conduit 来实现，分别为<code>ConduitStreamSourceChannel</code> 及 <code>ConduitStreamSinkChannel</code> 。</p>

<p><code>NioSocketStreamConnection</code> 内部包含<code>NioSocketConduit</code>，这个类实现了 <code>ConduitStreamSourceChannel</code> 及 <code>ConduitStreamSinkChannel</code> 。在TCP场景下，<code>StreamConnection</code>中的读写channel正是指向了<code>NioSocketConduit</code>。这个层次包装得有点绕，需要慢慢梳理。</p>

<p>在accept的时候，得到的可以是<code>StreamConnection</code>，其实也就是得到了一个可读可写的channel，设计得也没问题。可以基于这个channel设置读写listener。但是如果想在读listener里发起写操作，由于在读listener里看到的是一个只读的channel，所以就没办法写。所以才会有其他包装的channel。</p>

<p>理清了以上关系，就可以不用那个deprecated的API来实现一个echo server：</p>

<p><div class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">ReadListener</span> <span class="kd">implements</span> <span class="n">ChannelListener</span><span class="o">&lt;</span><span class="n">StreamSourceChannel</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="c1">// 保存一个可写的channel，才能在读listener里做写操作</span>
  <span class="kd">private</span> <span class="n">StreamSinkChannel</span> <span class="n">sinkChannel</span><span class="o">;&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">public</span> <span class="nf">ReadListener</span><span class="o">(</span><span class="n">StreamSinkChannel</span> <span class="n">sinkChannel</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">sinkChannel</span> <span class="o">=</span> <span class="n">sinkChannel</span><span class="o">;</span>
  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleEvent</span><span class="o">(</span><span class="n">StreamSourceChannel</span> <span class="n">channel</span><span class="o">)</span> <span class="o">{</span>
    <span class="kd">final</span> <span class="n">ByteBuffer</span> <span class="n">buffer</span> <span class="o">=</span> <span class="n">ByteBuffer</span><span class="o">.</span><span class="na">allocate</span><span class="o">(</span><span class="mi">512</span><span class="o">);</span>
    <span class="kt">int</span> <span class="n">res</span><span class="o">;</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="k">while</span> <span class="o">((</span><span class="n">res</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="na">read</span><span class="o">(</span><span class="n">buffer</span><span class="o">))</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">buffer</span><span class="o">.</span><span class="na">flip</span><span class="o">();</span>
        <span class="n">Channels</span><span class="o">.</span><span class="na">writeBlocking</span><span class="o">(</span><span class="n">sinkChannel</span><span class="o">,</span> <span class="n">buffer</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="n">Channels</span><span class="o">.</span><span class="na">flushBlocking</span><span class="o">(</span><span class="n">sinkChannel</span><span class="o">);</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">res</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">channel</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="n">channel</span><span class="o">.</span><span class="na">resumeReads</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
      <span class="n">IoUtils</span><span class="o">.</span><span class="na">safeClose</span><span class="o">(</span><span class="n">channel</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kd">final</span> <span class="n">ChannelListener</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">AcceptingChannel</span><span class="o">&lt;</span><span class="n">StreamConnection</span><span class="o">&gt;&gt;</span> <span class="n">acceptListener</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ChannelListener</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">AcceptingChannel</span><span class="o">&lt;</span><span class="n">StreamConnection</span><span class="o">&gt;&gt;()</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handleEvent</span><span class="o">(</span><span class="n">AcceptingChannel</span><span class="o">&lt;</span><span class="n">StreamConnection</span><span class="o">&gt;</span> <span class="n">channel</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="n">StreamConnection</span> <span class="n">accepted</span><span class="o">;</span>
      <span class="c1">// channel is ready to accept zero or more connections</span>
      <span class="k">while</span> <span class="o">((</span><span class="n">accepted</span> <span class="o">=</span> <span class="n">channel</span><span class="o">.</span><span class="na">accept</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(&amp;</span><span class="n">ldquo</span><span class="o">;</span><span class="n">accepted</span> <span class="o">&amp;</span><span class="n">rdquo</span><span class="o">;</span>
            <span class="o">+</span> <span class="n">accepted</span><span class="o">.</span><span class="na">getPeerAddress</span><span class="o">());</span>
        <span class="c1">// stream channel has been accepted at this stage.</span>
        <span class="c1">// read listener is set; start it up</span>
        <span class="n">accepted</span><span class="o">.</span><span class="na">getSourceChannel</span><span class="o">().</span><span class="na">setReadListener</span><span class="o">(</span><span class="k">new</span> <span class="nf">ReadListener</span><span class="o">(</span><span class="n">accepted</span><span class="o">.</span><span class="na">getSinkChannel</span><span class="o">()));</span>
        <span class="n">accepted</span><span class="o">.</span><span class="na">getSourceChannel</span><span class="o">().</span><span class="na">resumeReads</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">ignored</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">};</span>
<span class="kd">final</span> <span class="n">XnioWorker</span> <span class="n">worker</span> <span class="o">=</span> <span class="n">Xnio</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">createWorker</span><span class="o">(</span>
    <span class="n">OptionMap</span><span class="o">.</span><span class="na">EMPTY</span><span class="o">);</span>
<span class="c1">// Create the server.</span>
<span class="n">AcceptingChannel</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;?</span> <span class="kd">extends</span> <span class="n">StreamConnection</span><span class="o">&gt;</span> <span class="n">server</span> <span class="o">=</span> <span class="n">worker</span>
    <span class="o">.</span><span class="na">createStreamConnectionServer</span><span class="o">(</span><span class="k">new</span> <span class="nf">InetSocketAddress</span><span class="o">(</span><span class="mi">12345</span><span class="o">),</span>
        <span class="n">acceptListener</span><span class="o">,</span> <span class="n">OptionMap</span><span class="o">.</span><span class="na">EMPTY</span><span class="o">);</span>
<span class="c1">// lets start accepting connections</span>
<span class="n">server</span><span class="o">.</span><span class="na">resumeAccepts</span><span class="o">();</span></code></pre></div></p>

<p>完。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实现JVM中的JIT]]></title>
    <link href="http://codemacro.com/2017/03/09/toy-jit/"/>
    <updated>2017-03-09T00:00:00+00:00</updated>
    <id>http://codemacro.com/2017/03/09/toy-jit</id>
    <content type="html"><![CDATA[<p>在JVM中，JIT (Just-in-Time) 即时编译指的是在Java程序运行过程中JVM优化部分指令为本地指令，从而大幅提升性能。在上一篇文章<a href="http://codemacro.com/2017/02/25/toy-jvm/">写一个玩具Java虚拟机</a>中实现了一个基本可以运行Java字节码的JVM。本篇文章描述我是如何在这个玩具JVM中实现JIT的。</p>

<p>推荐文章<a href="http://eli.thegreenplace.net/2013/11/05/how-to-jit-an-introduction/">&ldquo;How to JIT - an introduction&rdquo;</a>，介绍了JIT的基本实现原理。作者把JIT分为两个阶段：</p>

<ul>
<li>运行期生成机器代码(本地指令)</li>
<li>执行机器代码</li>
</ul>


<p>生成机器代码很好理解，就是一个JVM指令到机器指令的翻译；而执行机器代码，原理上是利用了OS提供了API可以分配可以执行的内存，然后往这块内存中写入机器码，从而实现运行期可以执行动态生成的机器码功能。</p>

<p>我们可以利用这个原理来实现JIT，但是未免太底层了点，需要做很多工作来完成这件事情。我们可以利用<a href="https://www.gnu.org/software/libjit/">libjit</a>来简化实现。这个作者博客里还有些libjit的教程，其中<a href="http://eli.thegreenplace.net/2013/10/17/getting-started-with-libjit-part-1">part 1</a>值得阅读。 简单来说，libjit对机器指令做了抽象，利用它的API来描述一个函数包含了哪些指令，实现了什么功能。然后具体的指令生成以及指令执行则交给libjit完成。</p>

<p>例如以下使用libjit的代码：</p>

<pre><code>// t = u
jit_insn_store(F, t, u); // 类似 mov 指令
// u = v
jit_insn_store(F, u, v);

// v = t % v
jit_value_t rem = jit_insn_rem(F, t, v); // 求余指令
jit_insn_store(F, v, rem);
</code></pre>

<p>所以，我们需要做的，就是将JVM的字节码，翻译成一堆libjit的API调用。但是我希望能够稍微做点抽象，我们写个翻译器，能够将JVM这种基于栈的指令，翻译成基于寄存器的指令，才方便后面无论是使用libjit还是直接翻译成机器码。</p>

<!-- more -->


<h2>指令翻译</h2>

<p>要将基于栈的指令翻译成基于寄存器的指令（类似），仔细想想主要解决两个问题：</p>

<ul>
<li>去除操作数栈</li>
<li>跳转指令所需要的标签</li>
</ul>


<p>去除操作数栈，我使用了一个简单办法，因为JVM中执行字节码时，我们是可以知道每条指令执行时栈的具体情况的，也就是每条指令执行时，它依赖的操作数在栈的哪个位置是清楚的。例如，假设某个函数开头有以下指令：</p>

<pre><code>opcode [04] - 0000: iconst_1   # [1]
opcode [3C] - 0001: istore_1   # []
opcode [1B] - 0002: iload_1    # [1]
opcode [1A] - 0003: iload_0    # [1, N]
opcode [68] - 0004: imul       # [1 * N]
</code></pre>

<p>当执行imul指令时，就可以知道该指令使用栈s[0]、s[1]的值，做完计算后写回s[0]。所以，类似JVM中局部变量用数字来编号，我也为栈元素编号，这些编号的元素全部被视为局部变量，所以这些指令全部可以转换为基于局部变量的指令。为了和JVM中本身的局部变量统一，我们将栈元素编号从局部变量后面开始。假设以上函数有2个局部变量，那么栈元素从编号2开始，局部变量编号从0开始。以上指令可以翻译为：</p>

<pre><code>mov 1, $2   # 常量1写入变量2
lod $2, $1  # 变量2写入变量1
lod $1, $2  # 变量1写回变量2
lod $0, $3  # 变量0写入变量3
mul $3, $2  # 变量3与变量2相乘，写回变量2
</code></pre>

<p>这里，我们定义了自己的中间指令集(IR)，这个中间指令集存在的意义在于，在将来翻译为某个平台的机器码时，它比JVM的指令集更容易理解。中间指令集是一种抽象，方便基于它们使用libjit或其他手段翻译成机器码。</p>

<p>不过，我们看到上面的指令非常冗余。要优化掉这种冗余相对比较复杂，所以本文暂时不讨论这个问题。</p>

<p>这个中间指令基于局部变量的方式，是利于JIT下游做各种具体实现的，例如是否直接转换为通用寄存器，即一定范围的局部变量数是可以直接使用寄存器实现，超出该范围的局部变量则放在栈上，用栈模拟；或者全部用栈模拟。注意在机器指令中栈元素是可以直接偏移访问的，不同于“基于栈的虚拟机”中的栈。</p>

<p>以上指令，我们可以简单地为每条指令设定如何翻译为libjit的调用，例如mov指令：</p>

<pre><code>static void build_mov(BuildContext* context, const Instruction* inst) {
  jit_value_t c = jit_value_create_nint_constant(context-&gt;F, jit_type_int, inst-&gt;op1); 
  jit_insn_store(context-&gt;F, context-&gt;vars[inst-&gt;op2], c);
}
</code></pre>

<p>例如mul指令：</p>

<pre><code>static void build_mul(BuildContext* context, const Instruction* inst) {
  // context-&gt;vars就是前面说的局部变量表，包含了JVM中的局部变量及操作数栈
  jit_value_t tmp = jit_insn_mul(context-&gt;F, context-&gt;vars[inst-&gt;op1], context-&gt;vars[inst-&gt;op2]);
  jit_insn_store(context-&gt;F, context-&gt;vars[inst-&gt;op1], tmp);
}
</code></pre>

<p>接下来说另一个问题：跳转指令的标签。在机器指令中，跳转指令跳转的目标位置是一个绝对地址，或者像JVM中一样，是一个相对地址。但是在我们的中间指令集中，是没有地址的概念的，在翻译为机器指令时，也无法获取地址。所以，我们一般是增加了一个特殊指令<code>label</code>，用于打上一个标签，设置一个标签编号，相当于是一个地址。在后面的跳转指令中，则跳转的是这个标签编号。</p>

<p>所以，我们需要在翻译JVM指令到我们的中间指令时，识别出哪些地方需要打标签；并且在翻译跳转类指令时，翻译为跳转到某个编号的标签。</p>

<p>例如以下指令：</p>

<pre><code>opcode [04] - 0000: iconst_1
opcode [3C] - 0001: istore_1
opcode [1B] - 0002: iload_1     # 会被调整，需要在此打标签
opcode [1A] - 0003: iload_0
...
opcode [1A] - 0010: iload_0
opcode [9D] - 0011: ifgt -9     # pc-9，也就是跳转到0002位置
</code></pre>

<p>为了打上标签，我们的翻译需要遍历两遍指令，第一遍用来找出所有标签，第二遍才做真正的翻译。</p>

<pre><code>  // 该函数遍历所有指令，找出所有需要打标签的指令位置
  private List&lt;Integer&gt; createLabels(List&lt;InstParser.Instruction&gt; jbytecode) {
    List&lt;Integer&gt; labels = new LinkedList&lt;&gt;();
    for (InstParser.Instruction i : jbytecode) {
      LabelParser labelParser = labelParsers.get(i.opcode);
      if (labelParser != null) { // 不为空时表示是跳转指令
        int pc = labelParser.parse(i); // 不同的跳转指令地址解析不同，解析得到跳转的目标地址
        labels.add(pc); // 保存起来返回
      }
    }
    return labels;
  }
</code></pre>

<p>然后在翻译指令的过程中，发现当前翻译的指令地址是跳转的目标位置时，则生成标签指令：</p>

<pre><code>   List&lt;Integer&gt; labels = createLabels(jbytecode);
   ...
   Iterator&lt;InstParser.Instruction&gt; it = jbytecode.iterator();
    while (it.hasNext()) {
      InstParser.Instruction inst = it.next();
      int label = labels.indexOf(inst.pc);
      if (label &gt;= 0) {
        state.addIR(new Inst(op_label, label)); // 生成标签指令，label就是标签编号
      }
</code></pre>

<p>在处理跳转指令时，则填入标签编号：</p>

<pre><code>translators.put(Opcode.op_ifgt, (state, inst, iterator) -&gt; {
  short offset = (short)((inst.op1 &lt;&lt; 8) + inst.op2);
  int pc = inst.pc + offset;
  int label = state.findLabel(pc); // 找到标签编号
  int var = state.popStack();
  state.addIR(new Inst(op_jmp_gt, var, label));
});
</code></pre>

<p>我们的中间指令集中，跳转指令和标签指令就为：</p>

<pre><code>label #N            // 打上标签N
jmp_gt $var, #N     // 如果$var&gt;0，跳转到标签#N
</code></pre>

<p>看下使用libjit如何翻译以上两条指令：</p>

<pre><code>static void build_label(BuildContext* context, const Instruction* inst) {
  // 打上标签，inst-&gt;op1为标签编号N，对应写到context-&gt;labels[N]中
  jit_insn_label(context-&gt;F, &amp;context-&gt;labels[inst-&gt;op1]);
}

static void build_jmp_gt(BuildContext* context, const Instruction* inst) {
  jit_value_t const0 = jit_value_create_nint_constant(context-&gt;F, jit_type_int, 0);
  // 是否&gt;0
  jit_value_t cmp_v_0 = jit_insn_gt(context-&gt;F, context-&gt;vars[inst-&gt;op1], const0);
  // 大于0则跳转到标签inst-&gt;op2
  jit_insn_branch_if(context-&gt;F, cmp_v_0, &amp;context-&gt;labels[inst-&gt;op2]);
}
</code></pre>

<p>代码贴得有点多，大概懂原理就行了。</p>

<p>在JIT中还有个很重要的过程，就是判定哪些代码需要被JIT。这里只是简单地尝试对每一个函数进行JIT，发现所有指令都能够被JIT时就JIT。</p>

<h2>指令执行</h2>

<p>在上一篇文章中，执行每个JVM函数时，都会有一个Frame与之关联。所以，在这里只要函数被JIT了，对应的帧就会包含被编译的代码，也就是libjit中的<code>jit_function_t</code>。在该Frame被执行时，就调用libjit执行该函数：</p>

<pre><code>  private void runNative() {
    int arg_cnt = getArgsCount();
    int[] args = new int[arg_cnt];
    for (int i = 0; i &lt; arg_cnt; ++i) {
      if (mLocals[i].type != Slot.Type.NUM) throw new RuntimeException("only supported number arg in jit");
      args[i] = mLocals[i].i;
    }
    int ret = mJIT.invoke(args); // mJIT后面会看到，主要就是将参数以数组形式传递到libjit中，并做JIT函数调用
    mThread.popFrame();
    if (hasReturnType() &amp;&amp; mThread.topFrame() != null) {
      mThread.topFrame().pushInt(ret); // 目前只支持int返回类型
    }
  }
</code></pre>

<h2>实现</h2>

<p>以上就是整个JIT的过程，主要工作集中于JVM指令到中间指令，中间指令到libjit API调用。整个实现包含以下模块：</p>

<pre><code>+-----------+       +----------+
| ASM       |       | libjit   |
|           | &lt;-----+ API call |
+-----------+       +----+-----+
                         ^
                         |
+-----------+       +----+-----+
|  JVM      |       |  IR code |
|  bytecode +-----&gt; |          |
+-----------+       +----------+
</code></pre>

<p>JVM byte code及IR code的处理是在Java中完成的；处理完后将IR code输出为byte[]，通过JNI调用包装好的C API。这个C API则是基于libjit，将IR code翻译为libjit的API调用。指令翻译完后调用libjit的API得到最终的ASM机器指令。</p>

<p>同样，要执行指令时，也是通过JNI调用这个C API。JNI交互全部包装在以下类中：</p>

<pre><code>public class ToyJIT {
  private long jitPtr = 0;

  public void initialize(byte[] bytes, int maxLocals, int maxLabels, int argCnt, int retType) {
    jitPtr = compile(bytes, maxLocals, maxLabels, argCnt, retType);
  }

  public int invoke(int... args) {
    return invoke(jitPtr, args);
  }

  static {
    System.loadLibrary("toyjit");
  }
  private static native long compile(byte[] bytes, int maxLocals, int maxLabels, int argCnt, int retType);
  private static native int invoke(long jitPtr, int[] args);
</code></pre>

<p>即，<code>libtoyjit.so</code> 主要提供翻译接口 <code>compile</code> 及执行接口 <code>invoke</code>。</p>

<h2>性能对比</h2>

<p>简单测试了下一个阶乘计算函数：</p>

<pre><code>  public static int fac2(int n) {
    int r = 1;
    do {
      r = r * n;
      n = n - 1;
    } while (n &gt; 0);
    return r;
  }

 ...
    int i = 0;
    for (; i &lt; 10000; ++i) {
        fac2(100);
    }
 ...
</code></pre>

<p><code>fac2</code>函数会被JIT，测试发现不开启JIT时需要16秒，开启后1秒，差距还是很明显的。</p>

<p>最后奉上代码，<a href="https://github.com/kevinlynx/toy_jit">toy_jit</a>，就是前面说的C API部分，翻译IR到libjit API call，包装接口用于JNI调用。redhat 7.2下编译，需要先编译出libjit，我是直接clone的libjit master编译的。Java部分还是在<a href="https://github.com/kevinlynx/toy_jvm">toy_jvm</a>中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[写一个玩具Java虚拟机]]></title>
    <link href="http://codemacro.com/2017/02/25/toy-jvm/"/>
    <updated>2017-02-25T00:00:00+00:00</updated>
    <id>http://codemacro.com/2017/02/25/toy-jvm</id>
    <content type="html"><![CDATA[<p>本文描述了一个用Java实现的玩具JVM，用Java实现的好处是可以不用处理JVM中的垃圾回收。</p>

<p>Java虚拟机是基于栈的虚拟机。栈虚拟机的特点是所有临时操作数都存放在栈中。编译器生成的指令都会围绕着这个栈展开，相对而言，解释执行这些指令会比较容易。基于栈的虚拟机可能会生成如下指令：</p>

<pre><code>push 3   # 把立即数3压栈
push 4   # 把立即数4压栈
add      # 从栈中弹出两个操作数进行相加，结果压回栈中
</code></pre>

<p>Java .class文件存储的主要就是编译后的指令，一个玩具JVM，简单来说就是解释执行这里面的指令。接下来就说说为了让这个JVM跑起来需要实现哪些功能。</p>

<h2>class 文件解析</h2>

<p>推荐一下 <a href="https://www.codeproject.com/articles/35915/java-class-viewer">Java class viewer</a>，里面有个工具可以可视化class文件内容。另外我直接复用了他解析class文件的代码。</p>

<p>class文件描述的信息是以class为单位的，一个类如果有嵌套类，这个嵌套类也会生成为单独的class文件。从c/c++程序员的视角来看，class文件的生成有点类似编译，编译器在编译期间只做依赖符号存在与否的检查。所有引用其他class的地方，不同于c/c++，java class的引用都是在运行期定位的。这里看看一个简单的类class文件结构是怎样的：</p>

<!-- more -->


<pre><code>package test;

public class Simple {
  private int data;

  public int add(int a, int b) {
    return a + b;
  }
}
</code></pre>

<p><img src="http://i.imgur.com/VCk3vGO.jpg" alt="" /></p>

<p>一个class文件比较重要的有：</p>

<ul>
<li>constant pool(常量池)：存储字符串字面量、函数原型描述、类成员描述、class引用描述。字节码中经常会引用常量池中的内容，例如要设置某个成员变量，字节码中的操作数就是常量池索引，从索引中获取出具体是哪个成员变量</li>
<li>fields：描述类成员变量</li>
<li>methods: 描述类成员函数</li>
<li>attributes: 分布在很多地方，可能嵌套，用于描述method字节码、调试符号信息等。</li>
</ul>


<p>常量池非常重要，这里看看class文件中是如何使用常量池的。例如，一个field描述：</p>

<p><img src="http://i.imgur.com/dUnFttG.jpg" alt="" /></p>

<p>其中<code>name_index</code>和<code>descriptor_index</code>的值，指向的就是常量池索引，通过前面推荐的class viewer去常量池中找就会找到对应的值：</p>

<p><img src="http://i.imgur.com/8uqslfH.jpg" alt="" /></p>

<p><code>descriptor_index</code>描述field类型，<code>I</code>指的是整数。Java里有一套描述类型的规则，这个规则在函数定义的地方也会看到。</p>

<p>methods只要有实现，就都会有一个Code attribute，也就是这个函数的具体实现字节码，例如前面的add函数字节码为：</p>

<pre><code>opcode [1B] - 0000: iload_1     # 将第1个局部变量值压栈
opcode [1C] - 0001: iload_2     # 将第2个局部变量值压栈
opcode [60] - 0002: iadd        # 弹出2个操作数相加，结果压栈
opcode [AC] - 0003: ireturn     # 弹出1个操作数作为函数返回值
</code></pre>

<p>解析出class文件中的信息后，玩具JVM就完成一半了。</p>

<h2>JVM指令</h2>

<p>JVM中已经有200多条指令了。但是这些指令很多都是相似的。具体实现这些指令时可以参考<a href="https://en.wikipedia.org/wiki/Java_bytecode_instruction_listings">指令表</a>。JVM指令就像x86指令一样，由操作码以及可选的操作数组成。操作码表示具体是哪条指令，占1个字节；操作数表示该操作码需要的参数，变长。class文件中字节码连续存放，像上一节的例子就是4条指令，每条指令只有操作码没有操作数，他们存放在class文件中就是：1B 1C 60 AC。</p>

<p>JVM依次读取这些指令并解释执行。这个过程同真实计算机CPU执行过程类似。用代码描述为：</p>

<pre><code>while (true) {
  code = fetchOpCode()
  if (code == iload_1) {
    push(1)
  } elif (code == iadd) {
    i1 = pop()
    i2 = pop()
    push(i1 + i2)
  } elif (code == bipush) { // 需要操作数的指令
    b = fetchOpValue()
    push(b)
  }
  ...
}
</code></pre>

<p>程序执行过程中有一个虚拟指针PC，用于指示当前字节码处理到哪个位置了。有些跳转指令会强制改变PC。不同于c/c++程序，JVM中跳转指令跳转的都是相对位移。JVM启动时，不同于c/c++，也没有地址重定位的过程(修正相对地址为实际地址)。</p>

<h2>执行环境</h2>

<h3>线程执行环境</h3>

<p>JVM中每个线程都是独立的执行单元。但是对于类符号等信息则是全局共享，堆上创建的对象也是全局可访问的。单个线程中调用函数会产生帧(frame)，每一帧都有一个独立的栈用于存储该帧执行的临时数据。从main函数开始执行，每进入一个函数创建一个帧，函数退出(执行return系列指令)清除当前帧。这里的帧也可以被实现为一个栈，当这个栈里没有帧时就表示这个线程退出。这个过程可以描述为：</p>

<pre><code>while (thread.topFrame() != null) {
  thread.topFrame().run() // 内部实现就是从Code属性处不断地取指令执行
}

// 执行到return语句时，就弹出该帧
if (code == op_return) {
  frame.getThread().popFrame()
}

// 遇到函数调用时，就根据目标函数创建出一帧
if (code == op_invoke) {
  method = findMethod(ref) // 函数调用时操作数是常量池索引，需要加载目标类，获取目标方法
  newFrame = createFrame(method) // 每个方法都会描述该方法内有多少局部变量，所需栈多大，根据这些信息初始化帧
  frame.getThread().pushFrame(newFrame) 
}
</code></pre>

<p>注释中提到了，class文件中method包含了“有多少局部变”、“需要多大的栈”等信息。局部变量的实现是一个数组，数组的下标表示局部变量是第几个。字节码中要访问局部变量时，全部是以这个下标来查找的。例如指令<code>istore_1</code>，表示从栈中弹出一个整数，并写到局部变量1中。</p>

<p><img src="http://i.imgur.com/dUW6ukh.jpg" alt="" /></p>

<h3>全局环境</h3>

<p>由于使用Java实现，堆内存的管理完全不用操心。如果我们代码中创建了一个类对象，或者简单点调用了另一个类的静态方法，这个时候会发生什么以及如何处理？例如以下代码：</p>

<pre><code>int a = Simple2.inc(2);
</code></pre>

<p>生成以下字节码：</p>

<pre><code>opcode [05] - 0004: iconst_2  # 压入常量2到栈，作为函数调用的参数
opcode [B8] - 0005: invokestatic 2 [Methodref: test.Simple2.inc, parameter = (int), returns = int]
</code></pre>

<p>可以看出调用静态函数<code>invokestatic</code>的操作数是2，指向的是常量池中的2。工具直接显示了常量池2是一个method，及该method的原型。</p>

<p>遇到这样的指令时，我们就需要找到并加载目标类。所以，全局信息里需要维护类列表。考虑到Java中类与类之间是否相同，除了看类名（全限定名）外，还得看类的加载器(class loader)。所以，玩具JVM中也需要有class loader机制（至少是个简化版）。程序启动时设定一个默认的类加载器，加载主类，执行主类main方法，执行过程中遇到对其他类的引用时，就使用当前类加载器继续加载目标类，如果已经加载就直接返回。</p>

<h2>类加载及main方法</h2>

<p>前面已经提到了类加载。其实类加载本质上就是把目标class文件加载到内存，保存该class信息。在调用一个类的方法时，也是根据方法名(考虑到方法重载，还得考虑方法的原型，在class file中也就是descriptor)找到具体的方法，根据方法初始化调用帧，以及根据方法获得其要执行的字节码。</p>

<p>所以，我们的JVM要跑起来，也就是找到并加载主类，然后找到主类中的main函数并执行。</p>

<pre><code>  public void run(String mainClass) {
    Class clazz = mRootLoader.loadClass(mainClass);
    MethodInfo method = clazz.findMethod("main", "([Ljava/lang/String;)V");
    Thread thread = new Thread();
    thread.run(clazz, method);
  }
</code></pre>

<p>当然，这个过程严格来说还得判定类访问控制、方法访问控制等。</p>

<p><strong>至此，这个玩具JVM就可以跑起来了</strong>。可以设定它的class path，加载类，从main方法开始执行，调用其他类的静态方法，写写阶乘的实现是没有问题了。但是Java中还有很多其他特性：类对象、调用类实例方法、异常处理、调用native方法等待。接下来我再讲讲这些特性的实现，一窥Java核心语法的实现。</p>

<h2>扩展实现</h2>

<h3>类对象及实例方法调用</h3>

<p>类对象的创建通过<code>new</code>指令完成，本质上也就是分配个对象，并关联类信息到这个对象。我们的实现中自然会有一个类用来表示玩具JVM中所有的对象：</p>

<pre><code>// 为了与java.lang.Object区分开
public class VObject {
  // 简单起见，直接以field名作为key，来保存该对象所有的成员变量
  private Map&lt;String, Slot&gt; mFields; 
  // 与之关联的类信息
  private final Class mClazz;
    ...
}
</code></pre>

<p>注意这里的<code>Class</code>是我们自己定义的Class，而不是java.lang.Class。<code>Slot</code>类型用于存储整数或一个引用(其他对象)。<code>new</code>指令的大概实现：</p>

<pre><code>register(Opcode.op_new, (codes, frame) -&gt; {
  int b1 = codes.readByte();
  int b2 = codes.readByte();
  int idx = (b1 &lt;&lt; 8) + b2; // 常量池索引，指向一个类信息描述
  String clazzName = frame.getClazz().resolveClassName(idx); // 根据这个类信息描述解析到具体的类名
  Class clazz = frame.getClazz().getClassLoader().loadClass(clazzName); // 使用当前的类加载器加载该类
  initClass(frame.getThread(), clazz); 
  VObject object = new VObject(clazz); // 创建该类对应的对象，完成new指令的对象创建动作
  frame.pushRef(object); // 根据new指令的语义，我们需要将创建好的对象引用压回栈中
});
</code></pre>

<p>需要注意的是，当我们在Java中写下代码 <code>new SomeClass()</code> 时，实际会产生两个功能的指令：a) 创建对象；b) 调用类的构造函数(<init>)</p>

<pre><code>opcode [BB] - 0004: name_new 2 [Class: test.Simple2]  # new 指令，操作数是类信息常量池索引
opcode [59] - 0007: dup 
opcode [B7] - 0008: invokespecial 3 [Methodref: test.Simple2. , parameter = (), returns = void] # 调用目标类的构造函数，也就是&lt;init&gt;方法
</code></pre>

<p>调用类构造函数同普通类实例方法原理相同，都会先压入对象引用。<code>invokespecial</code>指令用于调用类对象实例方法，从栈顶依次出栈参数，最后出栈类对象实例引用。具体可以看看指令表里的描述。</p>

<h3>类静态区域初始化</h3>

<p>首次加载某个类时，会执行其static区域代码。这个写测试看下生成的代码就懂了，就是生成一个<cinit>的静态方法，在加载类时先执行这个方法。</p>

<h3>异常处理</h3>

<p>当一个方法中有try/catch时，该方法就会生成出一个异常处理表，存储在Code属性中。如下图：</p>

<p><img src="http://i.imgur.com/Ms1qPYr.jpg" alt="" /></p>

<p>异常处理表每一项都包含：<code>start_pc</code>、<code>end_pc</code>、<code>handler_pc</code> 及<code>catch_type</code>，表示在start_pc/end_pc间发现异常，且异常类型是catch_type时，则跳转到handler_pc处执行代码，也就是异常处理代码。其中catch_type也是常量池中的索引，当其为0时，则不是常量池索引，而是表示catch所有类型，其实就是finally块。从这里也可以看出，常量池索引是从1开始，而不是0。</p>

<p>当异常发生时，JVM首先从当前帧对应的方法中的异常处理表查找异常处理代码，没有的话则弹出当前帧，回到上一帧，也就是调用者继续查找，直到找完所有调用帧。这个实现相对较多，就不列举代码了。</p>

<h3>调用本地方法</h3>

<p>前面实现的JVM都没有输出字符串的能力，要提供一个类似<code>System.out.println</code>的方法，就需要注册本地方法到JVM中。这里可以简单地为整个JVM设置一个本地方法表，在JVM启动时完成注册。类似以下代码：</p>

<pre><code>public static void native println(String s);
</code></pre>

<p>也会在class文件中留下一个method，但这个method会被标记为native，自然也没有Code属性，没有字节码可执行。当执行<code>invoke</code>系列指令时，发现调用的是native方法，就需要从全局本地方法表中查找。注册本地方法类似：</p>

<pre><code>mMethods.put(makeKey("java/lang/System", "println", "(Ljava/lang/String;)V"), (frame) -&gt; {
  String s = (String) frame.popRef();
  System.out.println(s);
});
</code></pre>

<p>本地方法执行时，通过<code>frame</code>参数就可以取出调用该方法传入的参数。</p>

<p>在实现了本地方法后，就可以给这个玩具JVM添加一些系统库，类似OpenJDK中jre目录下的lib。这些系统库可以包含java.lang.System.println、java.lang.String、java.lang.StringBuilder。简单起见，我实现的这些类和Java标准库有些不同。</p>

<h2>最后</h2>

<p>完整代码<a href="https://github.com/kevinlynx/toy_jvm">这里</a>。实现的指令很有限，可以跑通<a href="https://github.com/kevinlynx/toy_jvm/blob/master/test/AllTest.java">test/AllTest.java</a>中的代码。对于long/double等类型没有支持，各种限定访问的判断也没有。总之就是简单到仅仅可以一窥原理。基于java8，测试例子class文件java7编译(应该没关系)。祝玩得开心。</p>
]]></content>
  </entry>
  
</feed>
