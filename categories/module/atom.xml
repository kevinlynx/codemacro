<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: module | loop in codes]]></title>
  <link href="http://codemacro.com/categories/module/atom.xml" rel="self"/>
  <link href="http://codemacro.com/"/>
  <updated>2015-03-31T20:35:52+08:00</updated>
  <id>http://codemacro.com/</id>
  <author>
    <name><![CDATA[Kevin Lynx]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[dhtcrawler的进程模型经验]]></title>
    <link href="http://codemacro.com/2014/02/21/dhtcrawler-process/"/>
    <updated>2014-02-21T00:00:00+08:00</updated>
    <id>http://codemacro.com/2014/02/21/dhtcrawler-process</id>
    <content type="html"><![CDATA[<p>距离写<a href="http://codemacro.com/2013/07/02/dhtcrawler2/">dhtcrawler</a>已经有半年时间。半年前就想总结点心得经验，但最后写出来的并没有表达出我特别有感慨的地方。最近又被人问到这方面的经验问题，才静下心来思考整理了下。</p>

<p>我的经验是关于在写一个网络项目时所涉及到的架构（或者说是模型）。</p>

<p>在dhtcrawler中，一个主要的问题是：程序在网络中需要尽可能快尽可能多地收集请求，然后程序需要尽可能快地加工处理这些信息。本质上就这么简单，我觉得很多网络系统面临的都可能是类似的问题。</p>

<p>详细点说，dhtcrawler高峰期每天会收到2000万的DHT协议请求，收到这些请求后，dhtcrawler需要对这些请求做处理，包括：合并相同的请求；从外部网站请求下载种子文件；新增/更新种子信息到数据库；建立种子sphinx索引等。在实际运行期间，高峰期每天能新录入14万个种子。</p>

<p>那么如何架构这个系统来让处理速度尽可能地快呢？首先，毫无疑问这个系统是多线程/多进程，甚至是分布式的。写一个多线程程序学几个API谁都会，但是如何组织这些线程以让系统最优则是一个较困难的问题。根据dhtcrawler的经验，我简单总结了以下几种模型/架构：</p>

<!-- more -->


<h2>简单模型</h2>

<p>约定一个线程/进程为worker。那么简单模型就是每一个worker都包含了完整的处理逻辑，从收到请求，到把该请求处理完毕。</p>

<pre><code>Req -&gt; Worker -&gt; Process -&gt; O
</code></pre>

<p>当然，我们可以给系统配置若干个Worker，以求最大化效率。例子中，Req的来源是非常快非常多的，而 Process过程相对而言则非常慢，涉及到各种IO操作（从外部网站下载种子，写入数据库等）。</p>

<p>这个模型的整体效率完全受限于Process的过程。如果Req的来源速度还不是稳定的，那么Process的速度将严重影响系统的吞吐性。</p>

<p>当然这个模型的优点就是特别简单，咋并发系统中简单有利于维护和调试。</p>

<h2>粗粒度分离模型</h2>

<p>分离模型指的是把Req的获取过程和处理过程分离开来。也就是合理地将系统中慢的部分和快的部分分离。然后两者之间通过一些数据共享方式来交互。</p>

<pre><code>Req -&gt; ReqWorker -&gt; Pool
Pool -&gt; ReqProcessor -&gt; O
</code></pre>

<p>这个时候，ReqWorker可以以尽可能快的速度收集Req，不用受限于ReqProcessor的处理速度。</p>

<p>这个Pool的实现有很多方式。这种模型有点类似于线程/进程间的交互，典型的生产者消费者问题。在需要同步的实现中，Pool可能需要写的比较精巧。</p>

<p>Pool可以放置在内存中。也就是ReqWorker把收到的请求稍作加工就放到内存中。这里的稍作加工可以是一段时间里的重复数据合并。ReqProcessor则可以以一定策略从这个内存中取得Req。这个策略可以是以一定时间间隔，或者基于ReqWorker的通知。</p>

<p>在erlang中，可以以一个单独的进程来维护这个Pool。那么这里就是通过erlang的进程来实现数据的同步。本质上也是基于erlang进程的mailbox机制。这个维护Pool的进程逻辑足够简单，可以快速响应ReqWorker的Req压入，以及ReqProcessor的Req取出。</p>

<p><strong>在用erlang的过程中，很多时候就是在平衡这种<a href="http://en.wikipedia.org/wiki/Actor_model">actor</a>进程模式中各种进程间的协调程度。</strong>平衡不好会导致两种情况：a)进程mailbox暴涨最后内存耗尽；b)消费者进程请求资源超时。</p>

<p>Pool被放置在内存中时，本身也可能有问题。例如数据量过大，无论是直接基于OS的程序还是基于erlang/jvm等虚拟机的程序，都可能在这个时候出现问题。并且，把数据放置在内存中也可能由于程序不稳定导致数据丢失。</p>

<p>dhtcrawler中把很多中间数据放置在数据库中。当然这里是个权衡问题。更复杂的系统里我相信就可以加入内存数据库之类的系统。</p>

<p>使用了分离模型之后，还是可以配置每种进程的数量，但是这里的问题在于很难平衡每种进程所配置的比例，以最大化使用CPU内存之类的资源。</p>

<h2>细粒度分离模型</h2>

<p>异步程序编写起来始终比同步程序更困难。在异步系统中需要加入各种例如事件、消息等机制。一个简单的逻辑可能会分散到程序的不同地方。对于资源的管理，错误的排除，性能的调优都带来了困难。</p>

<p>细粒度分离模型同粗粒度模型一样，只不过对进程种类的划分粒度更细。在erlang这种使用进程来组织程序合情合理的语言中，就可以做到每一种进程仅仅只做一种事情，就像函数设计原则一样，功能单一。</p>

<p>以dhtcrawler为例，整个系统可以划分为如下若干种进程：</p>

<ul>
<li>请求收集，用于收集请求，涉及到网络操作和数据库操作</li>
<li>请求分类，将请求按是否需要从外部网站下载种子分类，仅涉及到数据库操作</li>
<li>种子下载，从外部网站下载种子</li>
<li>种子索引，建立sphinx索引</li>
</ul>


<p>部分简单的进程其代码实现量不到千行。在erlang的进程中也是简单的几个消息，维护起来非常容易。</p>

<p>从上面的这种模型中，进程之间全部通过数据库做交互，那就很自然地可以发展为分布式系统。数据库再通过集群之类的技术，可以较高地提升系统的吞吐量。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅析软件工程开发方法学RUP]]></title>
    <link href="http://codemacro.com/2013/03/21/rup/"/>
    <updated>2013-03-21T00:00:00+08:00</updated>
    <id>http://codemacro.com/2013/03/21/rup</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>因为之前一直处在游戏开发行业，由于种种原因一直对软件工程中的项目管理、项目开发方法缺乏体验。虽然项目中也曾倡导编写更多的文档，无论是模块说明文档还是设计文档，但效果一直不好。不甚理想的地方主要体现在文档的规范性欠缺、不统一、浮于表面没有实质内容。文档的编写缺乏详尽的方法指导，那么所谓的设计文档要么是用来敷衍上级要么就是随着开发人员的水平不一而千差万别。</p>

<p>当我开始目前这个非游戏项目时，我也曾想，前期做好结构设计，制定好关键问题的解决方案，那么要完成这个项目就不在话下了。但是我很快就面临了一个问题：需求不定。回想身处游戏公司的那些日子，程序员总是抱怨策划需求变更过快过多，在每一次策划提出一个需求变更时，谨慎的程序员都会再三让策划保证：放心，不会变了。而我面临的问题则更为严峻。我意识到，项目的需求，就连用户也无法一一罗列出来。我们需要的是需求调研。但就算你将客户的所有需求全部挖掘出来后（这几乎不可能，因为他们自己也不太清楚自己想要什么），当你交付了第一个软件版本，几乎可以肯定客户会提出一大堆的需求变更：我要的不是这个，我要的那个怎么没有，哦，我当初以为你说的是另一个意思。</p>

<p>当然，需求调研这种工作不是让程序员去做的（那会更悲剧，无论是对客户还是对程序员而言，他们都是在对牛弹琴）。但需求的不确定性也总是存在的。</p>

<p>事实上，需求变化本身就是一个很正常的现象。我一向愿意更悲观地处理软件开发方面的问题，所谓小心使得万年船。基于此，我决定摆好心态学学软件开发的方法学。</p>

<h2>概要</h2>

<p>本文简要描述、总结了RUP开发方法学的主要内容，结合我自己的感受阐述了一些RUP的核心原则。我相信我所理解的内容是肤浅的，对于非代码的表达我更相信其是存在歧义的。所以本文仅当是一种经验参考，不必当真。</p>

<p>RUP据传是用于指导大型甚至超大型项目开发的，我们做的不是这样规模的项目。但是我们需要记录下整个项目的开发过程，通过这个过程中产出的<strong>工件</strong>任何一个人可以看出这个项目是如何实现出来的，其目的在于规避唯有从海量代码中才能熟悉项目实现这种问题。这里出现了一个概念：工件，其指的是软件项目开发过程中任何留下记录的事物，例如文档、图、代码等。<strong>RUP的一个重要思想，在于其整个软件开发过程都是可推导的</strong>。例如我们通常说的软件架构，或小一点的模块结构，都是通过开发过程中前面阶段产出的工件推导得出，而<strong>不是凭借程序员的经验拍脑袋想出来的</strong>（经验不太可靠，并且千差万别，而<strong>推导</strong>意味着将每个环节变得可靠）。我们借助RUP的这个特性，创建这些工件，用以建立起软件实现的可靠知识库。</p>

<!-- more -->


<h2>RUP概览</h2>

<p>以下均摘自\<Thinking in UML\>中对RUP的描述：</p>

<blockquote><p>统一过程归纳和集成了软件开发活动中的最佳实践，它定义了软件开发过程中最重要的阶段和工作（四个阶段和九个核心工作流），定义了参与软件开发过程的各种角色和他们的职责，还定义了软件生产过程中产生的工件，并提供了模板。最后，采用演进式软件生命周期（迭代）将工作、角色和工件串在一起，形成了统一过程。</p>

<p>统一过程是一种追求稳定的软件方法，它追求开发稳定架构，控制变更</p>

<p>统一过程集成了面向对象方法、UML语言、核心工作流、工件模板和过程指导等知识</p></blockquote>

<p>简单来说，RUP作为一种软件项目开发方法学，<strong>它定义了软件开发的每一个过程，最重要的是它指导了在每一个过程需要产出什么，这些产出又是怎样得到。它试图规范化整个流程，以规避需求变更，项目参与者水平不一等带来的项目不可控等问题，以期一个软件产品稳定地开发出来</strong>。在一个项目开发过程中，最核心的资源是人，最不可控的亦是人。</p>

<h2>RUP过程与实践</h2>

<p>我觉得要快速学习一种知识，需要首先获得这门知识的总体框架。另一方面，在我们获得更多信息后，我们需要挖掘出这门知识的核心思想。学习RUP我觉得从这两方面入手是相对比较快速和有效的手段。</p>

<h3>RUP框架</h3>

<p><strong>RUP定义了软件开发过程的四个阶段，以及9个工作流程</strong>。一张极为经典的RUP开发过程框架图如下：</p>

<p><img src="/assets/res/rup/rup.png" alt="rup" /></p>

<p>RUP将整个软件开发过程分为四个阶段：</p>

<ul>
<li>先启(Inception)、</li>
<li>精化(Elaboration)</li>
<li>构建(Construction)</li>
<li>产品化(Transition)</li>
</ul>


<p>每一个阶段的工作分为9个流程：</p>

<ul>
<li>业务建模</li>
<li>需求</li>
<li>分析设计</li>
<li>实施</li>
<li>测试</li>
<li>部署</li>
<li>配置与变更管理</li>
<li>项目管理</li>
<li>环境</li>
</ul>


<p>其中，前6个流程被统称为"engineering disciplines"，后3个流程被称为"supporting disciplines"。当然，我们主要关注前6个流程。那么，这些工作流程和开发阶段又有什么关系呢？上图中其实已经阐明了这些关系。</p>

<p>RUP指导迭代开发。在软件开发的这4个阶段中，每一个阶段会被分为若干次迭代。而每一次迭代则涵盖了这9个工作流程。随着开发阶段向产品化靠近，自然而然地，需求的变更、增加自然会减少，所以从图中可以看出，开发过程越到后期，其工作流程中关于需求的工作则越少。同样，在先启阶段，其需求相关的工作则占据了该阶段的主要工作内容。</p>

<p>RUP中的迭代要求在每一次迭代中，都会完整地实施一遍整个工作流程。在软件实施阶段，甚至会在每一个迭代过程完后输出一个可运行的软件版本。这个版本可能会被交付给客户，以期进一步地在功能需求上取得与客户一致的意见。这倒是同敏捷开发有点类似。</p>

<p>既然制定了工作流程，那每一个工作流程该如何去实施呢？<strong>RUP制定了每个工作流程需要参与的角色，这些角色需要从事的活动，以及这些活动产生的工件。</strong></p>

<p>这句话实际上反映了RUP的一个重要信息，摘自wiki：</p>

<blockquote><p>RUP is based on a set of building blocks, or content elements, describing what is to be produced, the necessary skills required and the step-by-step explanation describing how specific development goals are to be achieved. The main building blocks, or content elements, are the following:</p>

<ul>
<li><strong>Roles (who)</strong> – A Role defines a set of related skills, competencies and responsibilities.</li>
<li><strong>Work Products (what)</strong> – A Work Product represents something resulting from a task, including all the documents and models produced while working through the process.</li>
<li><strong>Tasks (how)</strong> – A Task describes a unit of work assigned to a Role that provides a meaningful result.</li>
</ul>
</blockquote>

<h3>RUP建模</h3>

<p>在我看来，RUP每个工作流程所完成的工作，就是一个建模的过程。所谓建模，简单来说就是将需要描述的事物通过更系统的形式表达出来，以期获得对该事物更深入的理解。\<Thinking in UML\>中定义建模概念为：</p>

<blockquote><p>建模(modeling)，是指通过对客观事物建立一种抽象的方法用以表征事物并获得对事物本身的理解，同时把这种理解概念化，将这些逻辑概念组织起来，构成一种对所观察的对象的内部结构和工作原理的便于理解的表达。</p></blockquote>

<p>在这里，建模的过程需要使用一些工具。在RUP中建模使用UML来完成。在\<Thinking in UML\>中讲述了UML的核心模型，包括：</p>

<ul>
<li>业务用例模型</li>
<li>概念用例模型</li>
<li>系统用例模型</li>
<li>领域模型</li>
<li>分析模型</li>
<li>软件架构和框架</li>
<li>设计模型</li>
<li>组件模型</li>
<li>实施模型</li>
</ul>


<p>可能在大家的普遍认识中，UML无非就是几种图，并且粗看一眼理解起来也不困难，甚至还能用来画画类图做下代码结构设计。但UML的作用不仅仅如此。</p>

<p>以上所描述的UML核心模型中，每个模型并不单指的的是一种UML图。每个模型实际上都会包含几种UML图，会包含若干张UML图。这些模型基本上渗透于RUP的9个工作流程中，只不过不同的工作流程使用的模型比重不一而已。</p>

<p>例如在“分析设计”工作流程中，可能会使用到系统用例模型、分析模型、软件架构和框架、设计模型等，而业务用例模型可能在这个流程中根本不会用到；相反，业务用例模型则可能在“业务建模”流程中被广泛使用。</p>

<p>前已述及在RUP的每个工作流程中，RUP定义了该流程需要参与的角色，以及这些角色需要进行的活动，例如这里可以看看“分析设计”流程中的角色和活动集（摘自\<Thinking in UML\>）：</p>

<p><img src="/assets/res/rup/analyse-action.png" alt="analyse-action" /></p>

<p>相应的，在该工作流程中需要产出的工件集为（摘自\<Thinking in UML\>）：</p>

<p><img src="/assets/res/rup/analyse-ar.png" alt="analyse-ar" /></p>

<p>既然使用了UML作为建模工具，所以可以简单地说这些工件主要就是UML图，当然也会有其他文档性质的事物，例如网络协议结构、数据库表等UML无法描述的东西则通过普通文字性文档描述。</p>

<h3>RUP最佳实践</h3>

<p>到目前为止我们已经了解到RUP定义了开发过程(phase)，定义了每个过程包含的若干工作流程，还定义了每个工作流程需要哪些角色从事哪些活动来完成哪些工件。除此之外，RUP还提供了6条最佳实践用以指导软件开发：</p>

<ul>
<li>迭代开发</li>
<li>管理需求</li>
<li>使用基于组件的架构</li>
<li>可视建模</li>
<li>持续的质量验证</li>
<li>控制变更</li>
</ul>


<p>这些实践在我看来仅仅是一些项目开发的指导原则，它们渗透到每一个过程，每一个工作流程。在项目过程中实践这些原则，用以确保项目的成功。例如我们使用UML建模，以达到“可视建模”。我们通过建立需求用例，以“管理需求”。</p>

<h2>RUP核心思想</h2>

<p>似乎没有文档来专门阐述RUP的核心思想，但我觉得掌握其核心思想才是学习的要点所在。要理解一种软件开发方法学的核心思想，其实最好是将其与别的方法学做比较。这里先就我的一些感想做阐述。</p>

<h3>用例驱动</h3>

<p>用例驱动指的是整个软件项目的推进过程，是依靠“用例”来完成。\<Thinking in UML\>：</p>

<blockquote><p>在实际的软件项目中，一个软件要实现的功能通过用例来捕获，接下来的所有分析、设计、实现、测试都由用例来取得，即以实现用例为目标。在统一过程中用例能够驱动的不仅仅是分析设计。</p></blockquote>

<p>用例简单来说就是描述了一个系统功能。但必须注意的是，这仅仅是它定义的一小部分。用例主要分布在“业务建模”、“需求”、“分析设计”这些工作过程中。在不同的过程中用例的粒度和性质都不一样。例如对于一个借书系统而言，在业务建模阶段，我们可以获取出一个“借书”用例，其系统边界甚至不是系统而可能仅关注这个业务本身（因为这个阶段还没有考虑到计算机如何实现这个借书业务）；在系统分析阶段，我们就可以将“借书”这个用例细化为用户和计算机软件系统的交互；进一步地，我们可能会进一步精化这个用例，例如用户通过网页终端“借书”。（这里描述了很多建模的细节，可不必深究，本文只给出一个概要性的介绍）</p>

<p>我们说用例驱动软件开发，但它如何驱动的呢？我在实际的建模过程中，最明显的感受就是用例驱动了整个建模过程。</p>

<ul>
<li>在需求分析阶段，我以系统使用者的角度绘制出了一份用例图，用于表达使用者对该系统的需求</li>
<li>然后我绘制序列图（活动图等）来实现这些用例，也就是阐述使用者具体是如何与系统交互的</li>
<li>从之前的建模过程中我获得对系统功能需求方面的认识</li>
<li>基于前面的分析我可以绘制出系统用例图，以明确系统的各个功能需求</li>
<li>同样针对用例绘制用例实现图</li>
<li>用例本身应该包含更多的文档，因此我编写用例规约用以详细描述各个用例</li>
<li>从用例规约、用例实现中我可以抽离出一些分析类（较设计类更高抽象的类），包含用例场景中涉及到的实体，控制逻辑</li>
<li>细化这些分析类，将分析类组织起来形成系统，我会用界面类去衔接各个控制类</li>
<li>将得到的分析类按模块来划分，从而可以得到一个初步的系统架构</li>
<li>初步考虑系统实现，我甚至会得到一个初步是的系统部署图</li>
<li>回过头不断审视系统用例，以确认我是否实现了所有用例，这可以保证我的分析实现了所有需求，<strong>我不用枚举所有系统特性是否被我考虑周全，我仅需在已有用例图中核实</strong></li>
<li>基于模块实现各个用例，或者基于分析类来实现系统用例</li>
<li>通过重新绘制以及核实用例，可以进一步精化分析类，分析类在很大程度上会一一对应到设计类，而设计类则对应到实际的代码</li>
<li>可以进入设计阶段，设计阶段会考虑到系统的实现细节，例如使用的语言，使用的框架等</li>
</ul>


<p>进入设计阶段后，虽然可以进一步建模，得到会直接映射到代码的类图、序列图等，但这样的图在面临需求变更时，基本上会面临修改，这意味着维护这些文档需要耗费精力。所以，\<Thinking in UML\>中主张将精力放在维护分析类模型中，而通过其他约定实现从分析类到实际代码的转换。我觉得这个也在理。</p>

<h3>规范化整个过程</h3>

<p>我个人觉得RUP的一大特点在于规范化了整个软件开发过程，每一个步骤需要哪些角色参与，该干什么，怎么去干都有指导。加之这些活动的”可推导性“，这意味着不论参与角色属于什么水平，都可以稳固地推进项目进程。</p>

<p>此外，这种规范化也会给项目留下详细的演化过程。你可以明确地看到整个软件是如何演化出最终的产品代码，可以深入地理解项目代码中的设计。</p>

<h2>总结</h2>

<p>我只是一个RUP新手，即便如此，我依然不觉得RUP是软件开发的万能药。我相信任何软件开发方法都是有局限性的。我们在实际使用的时候也只是吸取其精华。不同的开发方法其适用范围也是不一样的。正如有人将RUP和XP做比较时说，如果你使用RUP去开一个杂货铺，在没开张之前你就已经破产了；同样如果你用XP去做飞机，飞机毁了十来次也许才能做出来（from \<Thinking in UML\> again）。</p>

<h2>参考文档</h2>

<ul>
<li><a href="http://blog.csdn.net/coffeewoo/">\<Thinking in UML\></a></li>
<li><a href="http://www.uml.org.cn/SoftWareProcess/2009031017.asp">RUP和IPD流程的优缺点</a></li>
<li><a href="http://en.wikipedia.org/wiki/IBM_Rational_Unified_Process">IBM Rational Unified Process(wiki)</a></li>
<li><a href="http://blog.roodo.com/rocksaying/archives/2051417.html">軟體工程三大陣營, RUP, CMMI, Agile Method(需翻墙)</a></li>
<li><a href="http://incredibleagile.com/download/xpVsrup.pdf">XP与RUP的比较</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈代码分层：构建模块化程序]]></title>
    <link href="http://codemacro.com/2011/04/04/module-level/"/>
    <updated>2011-04-04T00:00:00+08:00</updated>
    <id>http://codemacro.com/2011/04/04/module-level</id>
    <content type="html"><![CDATA[<p>模块化的程序是怎样的程序？我们可以说一个具有明显物理结构的软件是模块化的，例如带
插件的软件，一个完整的软件由若干运行时库共同构建；也可以说一个高度面向对象的库是
模块化的，例如图形引擎OGRE；也可以说一些具有明显层次结构的代码是模块化的。</p>

<p>模块化的软件具有很多显而易见的好处。在开发期，一个模块化的设计有利于程序员实现，
使其在实现过程中一直保持清晰的思路，减少潜伏的BUG；而在维护期，则有利于其他程序 员的理解。</p>

<!-- more -->


<p>在我看来，具有良好模块设计的代码，至少分为两种形式：</p>

<ul>
<li>整体设计没有层次之分，但也有独立的子模块，子模块彼此之间耦合甚少，这些子模块 构成了一个软件层，共同为上层应用提供服务；</li>
<li>整个库/软件拥有明显的层次之分，从最底层，与应用业务毫无相关的一层，到最顶层，
完全对应用进行直接实现的那一层，每一个相对高层的软件层依赖于更底层的软件层， 逐层构建。</li>
</ul>


<p>上述两种形式并非完全分离，在分层设计中，某一层软件层也可能由若干个独立的模块构成
。另一方面，这里也不会绝对说低层模块就完全不依赖于高层模块。这种双向依赖绝对不是 好的设计，但事实上我们本来就无法做出完美的设计。</p>

<p>本文将代码分层分为两大类：一是狭义上的分层，这种分层一般伴有文件形式上的表现；一 是广义上的分层，完全着眼于我们平时写的代码。</p>

<h2>软件分层</h2>

<p>软件分层一般我们可以在很多大型软件/库的结构图中看到。这些分层每一层本身就包含大
量代码。每个模块，每一个软件层都可能被实现为一个运行时库，或者其他以文件形式为 表现的东西。</p>

<h3>Example Android</h3>

<p>Android是Google推出的智能手机操作系统，在其官方文档中有Android的系统架构图：</p>

<p><img src="/assets/res/module_level/android-architecture.jpg" alt="image" /></p>

<p>这幅图中很好地反映了上文中提到的软件层次。整个系统从底层到高层分为Linux kernel，
Libraries/Runtime，Application
Framework，Applications。最底层的Kernel可以说与应
用完全不相关，直到最上层的Applications，才提供手机诸如联系人、打电话等应用功能。</p>

<p>每一层中，又可能分为若干相互独立（Again，没有绝对）的模块，例如Libraries那一层 中，就包含诸如Surface
manager/SGL等模块。它们可能都依赖于Kernel，并且提供接口给 上层，但彼此独立。</p>

<h3>Example Compiler</h3>

<p>在编译器实现中，也有非常明显的层次之分。这些层次可以完全按照编译原理理论来划分。 包括：</p>

<ul>
<li>词法分析：将文本代码拆分为一个一个合法的单词</li>
<li>语法分析：基于 <em>词法分析</em> 得到的单词流构建语法树</li>
<li>语义分析：基于 <em>语法分析</em> 得到的语法树进行语义上的检查等</li>
<li>生成器：基于 <em>语义分析</em> 结果（可能依然是语法树）生成中间代码</li>
<li>编译器：基于 <em>生成器</em> 得到的中间代码生成目标机器上的机器代码</li>
<li>链接器：基于 <em>编译器</em> 生成的目标代码链接成最终可执行程序</li>
</ul>


<p><strong>软件分层的好处之一就是对任务(task)的抽象，封装某个任务的实现细节，提供给其他 依赖模块更友好的使用接口。隔离带来的好处之一就是可轻易替换某个实现。</strong>
例如很 多UI库隔离了渲染器的实现，在实际使用过程中，既可以使用Direct X的渲染方式，也可 以使用OpenGL的实现方式。</p>

<p>但正如之前所强调，凡事没有绝对，凡事也不可过度。很多时候无法保证软件层之间就是单
向依赖。而另一些时候过度的分层也导致我们的程序过于松散，效率在粘合层之间绕来绕去 而消失殆尽。</p>

<h2>代码分层</h2>

<p>如果说软件分层是从大的方面讨论，那么本节说的代码分层，则是从小处入手。而这也更是
贴近我们日常工作的地方。本节讨论的代码分层，不像软件分层那样大。每一层可能就是 百来行代码，几个接口。</p>

<h3>Example C中的模块组织</h3>

<p>很多C代码写得少的C++程序员甚至对一个大型C程序中的模块组织毫无概念。这是对其他技 术接触少带来的视野狭窄的可怕结果。</p>

<p>在C语言的世界里，并不像某些C++教材中指出的那样，布满全局变量。当然全局变量的使
用也并不是糟糕设计的标志(goto不是魔鬼)。一个良好设计的C语言程序懂得如何去抽象、 封装模块/软件层。我们以Lua的源代码为例。</p>

<p>lua.h文件是暴露给Lua应用（Lua使用者）的直接信息源。接触过Lua的人都知道有个结构体
叫lua_State。但是lua.h中并没有暴露这个结构体的实现。因为一旦暴露了实现，使用者就
可能会随意使用其结构体成员，而这并不是库设计者所希望的。 <strong>封装数据的实现，也算 是构建模块化程序的一种方法。</strong></p>

<p>大家都知道暴露在头文件中的信息，则可能被当作该头文件所描述模块的接口描述。所以， 在C语言中任何置于头文件中的信息都需要慎重考虑。</p>

<p>相对的，我们可以在很多.c文件中看到很多static函数。例如lstate.c中的stack_init。
static用于限定其修饰对象的作用域，用它去修饰某个函数，旨在告诉：这个函数仅被当前文件（
模块）使用，它仅用于本模块实现所依赖，它不是提供给模块外的接口！
<strong>封装内部实现 ，暴露够用的接口，也是保持模块清晰的方式之一。</strong></p>

<p>良好的语言更懂得对程序员做一种良好设计的导向。但相对而言，C语言较缺乏这方面的语
言机制。在C语言中，良好的设计更依赖于程序员自己的功底。</p>

<h3>Example Java中的模块组织</h3>

<p>相较而言，Java语言则提供了模块化设计的语法机制。在Java中，如同大部分语言一样，一
般一个代码文件对应于一个代码模块。而在Java中，每个文件内只能有一个public class。 public
class作为该模块的对外接口。而在模块内部，则可能有很多其他辅助实现的class
，但它们无法被外部模块访问。这是语言提供的封装机制，一种对程序员的导向。</p>

<h3>Example OO语言中类接口设计</h3>

<p>无论在C++中，还是在Java中，一个类中的接口，都大致有各种访问权限。例如public、
private、protected。访问权限的加入旨在更精确地暴露模块接口，隐藏细节。</p>

<p>在C中较为缺乏类似的机制，但依然可以这样做。例如将结构体定义于.c文件中，将非 接口函数以static的方式实现于.c文件中。</p>

<p>OO语言中的这些访问权限关键字的应用尤为重要。C++新手们往往不知道哪些成员该public
，哪些该private。C++熟手们在不刨根挖底的情况下，甚至会对每个数据成员写出get/set
接口（那还不如直接public）。在public/private之间，我们需要做的唯一决策就是，哪些
数据/操作并非外部模块所需。如果外部模块不需要，甚至目前不需要，那么此刻，都不要
将其public。一个public信息少的class，往往是一个被使用者更喜欢的class。</p>

<p>（至于protected，则是用于继承体系之间，类之间的信息隐藏。）</p>

<h3>Example Lisp中的模块设计</h3>

<p>又得提提Lisp。</p>

<p>基于上文，我们发现了各种划分模块、划分代码层的方式，无论是语言提供，还是程序员自 己的应用。但是如何逐个地构建这些层次呢？</p>

<p>Lisp中倡导了一种更能体现这种将代码分层的方式：自底而上地构建代码。这个自底而上，
自然是按照软件层的高低之分而言。这个过程就像上文举的编译原理例子一样。我们先编写
词法分析模块，该模块可能仅暴露一个接口：get-token。然后可以立马对该模块进行功能
测试。然后再编写语法分析模块，该模块也可能只暴露一个接口：parse。语法分析模块建
立于词法分析模块之上。因为我们之前已经对词法分析模块进行过测试，所以对语法分析的 测试也可以立即进行。如此下去，直至构建出整个程序。</p>

<p>每一个代码层都会提供若干接口给上层模块。越上层的模块中，就更贴近于最终目标。每一
层都感觉是建立在新的“语言“之上。按照这种思想，最终我们就可以构建出DSL，即Domain Specific Language。</p>

<h3>分层的好处</h3>

<p>基于以上，我们可以总结很多代码分层的好处，它们包括（但不限于）：</p>

<ul>
<li>隐藏细节，提供抽象，隐藏的细节包括数据的表示（如lua_State）、功能的实现</li>
<li>在新的一层建立更高层的“语言”</li>
<li>接口清晰，修改维护方便</li>
<li>方便开发，将软件分为若干层次，逐层实现</li>
</ul>


<h3>一个问题的解决</h3>

<p>有时候，我们的软件层很难做到单向依赖。这可能是由于前期设计的失误导致，也可能确实
是情况所迫。在很多库代码中，也有现成的例子。一种解决方法就是通过回调。回调的实现
方式可以是回调函数、多态。多态的表现又可能是Listener等模式。</p>

<p>所有这些，主要是让底层模块不用知道高层模块。在代码层次上，它仅仅保存的是一个回调
信息，而这个信息具体是什么，则发生在运行期（话说以前给同事讲过这个）。这样就简单 避免了底层模块依赖高层模块的问题。</p>

<h2>END</h2>

<p>精确地定义一个软件中有哪些模块，哪些软件层。然后再精确地定义每个模块，每个头文件
，每个类中哪些信息是提供给外部模块的，哪些信息是私有的。这些过程是设计模块化程 序的重要方式。</p>

<p>但需要重新强调的是，过了某个度，那又是另一种形式的糟糕设计。但其中拿捏技巧，则只 能靠实践获取。</p>
]]></content>
  </entry>
  
</feed>
